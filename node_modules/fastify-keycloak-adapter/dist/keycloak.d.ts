import { FastifyInstance, FastifyReply, FastifyRequest } from 'fastify';
import { GrantSession } from 'grant';
import * as t from 'io-ts';
declare module '@fastify/session' {
    interface FastifySessionObject {
        grant: GrantSession;
        user: unknown;
    }
}
export type DefaultToken = {
    email_verified: Readonly<boolean>;
    name: Readonly<string>;
    preferred_username: Readonly<string>;
    given_name: Readonly<string>;
    family_name: Readonly<string>;
};
declare const KeycloakOptions: t.IntersectionC<[t.TypeC<{
    appOrigin: t.ReadonlyC<t.Type<string, string, unknown>>;
    keycloakSubdomain: t.ReadonlyC<t.Type<string, string, unknown>>;
    clientId: t.ReadonlyC<t.StringC>;
    clientSecret: t.ReadonlyC<t.StringC>;
}>, t.PartialC<{
    useHttps: t.ReadonlyC<t.BooleanC>;
    logoutEndpoint: t.ReadonlyC<t.StringC>;
    excludedPatterns: t.ReadonlyC<t.ArrayC<t.StringC>>;
    scope: t.ArrayC<t.ReadonlyC<t.StringC>>;
    callback: t.ReadonlyC<t.StringC>;
    disableCookiePlugin: t.ReadonlyC<t.BooleanC>;
    disableSessionPlugin: t.ReadonlyC<t.BooleanC>;
    retries: t.ReadonlyC<t.NumberC>;
    autoRefreshToken: t.ReadonlyC<t.BooleanC>;
}>]>;
export type KeycloakOptions = t.TypeOf<typeof KeycloakOptions> & {
    userPayloadMapper?: (tokenPayload: unknown) => object;
    unauthorizedHandler?: (request: FastifyRequest, reply: FastifyReply) => void;
};
declare const _default: (fastify: FastifyInstance, opts: KeycloakOptions) => Promise<void>;
export default _default;
